pyp
from preprocessor_utils import typed_expression, typed_expression_args, type_repeat
ypy

ctypedef unsigned int dim_t;
from cython.operator cimport dereference as deref
from libcpp11.stringstream cimport stringstream

from libc.stdlib cimport free

from cpython cimport PyObject, Py_INCREF
# Numpy must be initialized. When using numpy from C or Cython you must
# _always_ do that, or you will have segfaults
np.import_array()

cdef extern from "dali/tensor/Mat.h":
    cdef cppclass CMat "Mat" [T]:
        bint constant
        shared_ptr[string] name
        CMat()
        CMat(dim_t, dim_t)


        vector[dim_t] dims() const
        void npy_load(string fname)
        void npy_save(string fname, string mode)
        int id() const
        unsigned int number_of_elements() const
        dim_t dims(int idx)
        CMat[T] operator_plus   "operator+"(CMat[T] other) except +
        CMat[T] operator_plus   "operator+"(T other) except +
        CMat[T] operator_minus  "operator-"(CMat[T] other) except +
        CMat[T] operator_minus  "operator-"(T other) except +
        CMat[T] operator_times  "operator*"(CMat[T] other) except +
        CMat[T] operator_times  "operator*"(T other) except +
        CMat[T] operator_divide "operator/"(CMat[T] other) except +
        CMat[T] operator_divide "operator/"(T other) except +
        CMat[T] operator_pow    "operator^"(T other) except +
        CMat[T] operator_pow_mat"operator^"(CMat[T] other) except +

        CMat[T] sum()                  except +
        CMat[T] mean()                 except +
        CMat[T] L2_norm()              except +

        CMat[T] sigmoid()              except +
        CMat[T] tanh()                 except +
        CMat[T] relu()                 except +
        CMat[T] absolute_value "abs"() except +
        CMat[T] square()               except +
        CMat[T] exp()                  except +

        void clear_grad()
        void grad() except +
        void set_name(string& name)
        void print_stdout "print" ()
        void print_me "print" (stringstream& stream)
        CMat[T] dot(CMat[T] other) except+

        CMat(const CMat[T]&, bint, bint)

        TensorInternal[T]& w()
        TensorInternal[T]& dw()

cdef extern from "core/tensor/matrix_initializations.h":
    cdef cppclass matrix_initializations [T]:
        @staticmethod
        CMat[T]* uniform(T low, T high, int rows, int cols)
        @staticmethod
        CMat[T]* gaussian(T mean, T std, int rows, int cols)
        @staticmethod
        CMat[T]* eye(T diag, int width)
        @staticmethod
        CMat[T]* bernoulli(T prob, int rows, int cols)
        @staticmethod
        CMat[T]* bernoulli_normalized(T prob, int rows, int cols)
        @staticmethod
        CMat[T]* empty(int rows, int cols)
        @staticmethod
        CMat[T]* ones(int rows, int cols)
        @staticmethod
        CMat[T]* zeros(int rows, int cols)
        @staticmethod
        CMat[T]* from_pointer(T*, int row, int cols)
        @staticmethod
        CMat[T]* as_pointer(const CMat[T]&)

# forward declaring Matops


cdef extern from "core/math/memory_status.h":
    bint is_gpu_fresh[T](const CMat[T]& mat)
    bint is_cpu_fresh[T](const CMat[T]& mat)
    bint is_gpu_allocated[T](const CMat[T]& mat)
    bint is_cpu_allocated[T](const CMat[T]& mat)


from numpy.core.numerictypes import sctypeDict, sctype2char


cdef bint is_dtype_supported(np.NPY_TYPES type_id) nogil:
    return type_id == np.NPY_FLOAT32 or \
           type_id == np.NPY_FLOAT64 or \
           type_id == np.NPY_INT32


cdef class Mat:
    cdef void* matinternal
    cdef np.NPY_TYPES dtypeinternal

    property dtype:
        def __get__(Mat self):
            return np.PyArray_DescrFromType(self.dtypeinternal)

    def __dealloc__(Mat self):
        self.free_internal()


    def memory_status(Mat self):
        pypinline typed_expression(pyp,
            return {
                'gpu_fresh' : is_gpu_fresh[TYPE_NAME](DEREF_MAT(self)),
                'cpu_fresh' : is_cpu_fresh[TYPE_NAME](DEREF_MAT(self)),
                'gpu_allocated' : is_gpu_allocated[TYPE_NAME](DEREF_MAT(self)),
                'cpu_allocated' : is_cpu_allocated[TYPE_NAME](DEREF_MAT(self)),
            }
        ypy


    cdef free_internal(Mat self):
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME]* TYPED(ptr_internal)
        ypy
        if self.matinternal != NULL:
            pypinline typed_expression(pyp,
                TYPED(ptr_internal) = PTR_MAT(self)
                with nogil:
                    del TYPED(ptr_internal)
            ypy
            self.matinternal = NULL


    cdef void steal_numpy_memory(Mat self, np.ndarray py_array, bint steal):
        assert(py_array.ndim <= 2,
            "Only numpy arrays with dimensions 2 or lower can be borrowed")
        if is_dtype_supported(py_array.dtype.num):
            if self.dtypeinternal == np.NPY_NOTYPE:
                self.dtypeinternal = py_array.dtype.num
            else:
                if self.dtypeinternal != py_array.dtype.num:
                    py_array = py_array.astype(self.dtype)
        else:
            if self.dtypeinternal == np.NPY_NOTYPE:
                if np.issubdtype(py_array.dtype, np.float):
                    py_array = py_array.astype(np.float32)
                    self.dtypeinternal = py_array.dtype.num
                elif np.issubdtype(py_array.dtype, np.integer):
                    py_array = py_array.astype(np.int32)
                    self.dtypeinternal = py_array.dtype.num
                else:
                    raise ValueError("Invalid dtype: " + str(py_array.dtype) + " (should be int or float)")
            else:
                if self.dtypeinternal != py_array.dtype.num:
                    py_array = py_array.astype(self.dtype)

        cdef np.ndarray c_py_array
        cdef int n = py_array.shape[0]
        cdef int d = py_array.shape[1] if py_array.ndim > 1 else 1
        if steal:
            c_py_array = np.PyArray_GETCONTIGUOUS(py_array)
            if c_py_array.flags.owndata and c_py_array.flags.writeable:
                pypinline typed_expression(pyp,
                    self.free_internal()
                    self.matinternal = matrix_initializations[TYPE_NAME].from_pointer(<TYPE_NAME*> np.PyArray_DATA(c_py_array), n, d)
                ypy
                if (n * d) > 0:
                    np.PyArray_CLEARFLAGS(c_py_array, np.NPY_OWNDATA)
                return
        pypinline typed_expression(pyp,
            self.free_internal()
            self.matinternal = new CMat[TYPE_NAME](n, d)
            self.w = py_array.reshape((n,d))
        ypy

    def __cinit__(Mat self, *args, **kwargs):
        self.dtypeinternal = np.NPY_NOTYPE
        if kwargs.get('dtype') is not None:
            self.dtypeinternal = np.dtype(kwargs['dtype']).num
            if not is_dtype_supported(self.dtypeinternal):
                raise ValueError("Invalid dtype: " + str(self.dtype) + " (should be one of int32, float32, float64)")
        else:
            self.dtypeinternal = np.NPY_FLOAT32

        if len(args) == 2 and type(args[0]) == int and type(args[1]) == int:
            n, d = args[0], args[1]
            assert(n > -1 and d > -1), "Only positive dimensions may be used."
            pypinline typed_expression(pyp,
                self.free_internal()
                self.matinternal = new CMat[TYPE_NAME](n, d)
            ypy
        elif len(args) == 1 and type(args[0]) == np.ndarray:
            arr = args[0]
            if kwargs.get('dtype') is not None and arr.dtype != self.dtype:
                arr = arr.astype(self.dtype)
            self.steal_numpy_memory(arr, kwargs.get("borrow", False))
        elif len(args) == 1 and type(args[0]) == list:
            x = np.array(args[0])
            if len(x.shape) == 2:
                pass
            elif len(x.shape) == 1:
                x = x.reshape((1, x.shape[0]))
            elif len(x.shape) == 0:
                x = x.reshape((1,1))
            else:
                raise ValueError("Passed a list with higher than 2 dimensions to constructor.")

            self.steal_numpy_memory(x, True)
        else:
            raise ValueError("Passed " + str(args) + " to Mat constructor")

        if kwargs.get('name') is not None:
            pypinline typed_expression(pyp,
                DEREF_MAT(self).set_name(kwargs['name'].encode("utf-8"))
            ypy

    def dims(Mat self):
        pypinline typed_expression(pyp,
            return tuple(DEREF_MAT(self).dims())
        ypy

    property shape:
        def __get__(self):
            pypinline typed_expression(pyp,
                return tuple(DEREF_MAT(self).dims())
            ypy

    def npy_save(Mat self, str fname, str mode = "w"):
        cdef string fname_norm = normalize_s(fname)
        cdef string mode_norm = normalize_s(mode)
        pypinline typed_expression(pyp,
            DEREF_MAT(self).npy_save(fname_norm, mode_norm)
        ypy

    def npy_load(Mat self, str fname):
        cdef string fname_norm = normalize_s(fname)
        pypinline typed_expression(pyp,
            DEREF_MAT(self).npy_load(fname_norm)
        ypy

    def clear_grad(self):
        pypinline typed_expression(pyp,
            DEREF_MAT(self).clear_grad()
        ypy

    def grad(self):
        pypinline typed_expression(pyp,
            DEREF_MAT(self).grad()
        ypy

    def __array__(self):
        return self.w


    def astype(Mat self, dtype):
        if self.dtype == dtype:
            return self
        else:
            return Mat(self.w, dtype=dtype)

    property w:
        def __get__(self):
            return self.get_value(False)

        def __set__(self, value):
            self.get_value(False)[:] = value

    property dw:
        def __get__(self):
            return self.get_grad_value(False)

        def __set__(self, value):
            self.get_grad_value(False)[:] = value

    property constant:
        def __get__(self):
            pypinline typed_expression(pyp,
                return DEREF_MAT(self).constant
            ypy
        def __set__(self, bint constant):
            pypinline typed_expression(pyp,
                DEREF_MAT(self).constant = constant
            ypy

    def get_value(self, copy=False):
        if copy:
            return np.array(self.get_value(False), copy=True)

        cdef np.ndarray ndarray
        cdef np.npy_intp shape[2]

        pypinline typed_expression(pyp,
            if DEREF_MAT(self).number_of_elements() == 0:
                return np.zeros((0,0), dtype = self.dtype)
            shape[0] = <np.npy_intp> DEREF_MAT(self).dims(0)
            shape[1] = <np.npy_intp> DEREF_MAT(self).dims(1)
            ndarray = np.PyArray_SimpleNewFromData(
                2,
                shape,
                self.dtypeinternal,
                DEREF_MAT(self).w().data()
            )
        ypy

        ndarray.base = <PyObject*> self
        Py_INCREF(self)

        return ndarray

    def clone(Mat self):
        pypinline typed_expression_args(pyp, ["self"],
            return WRAP_MAT(CMat[TYPE_NAME](DEREF_MAT(self), True, True))
        ypy

    def copy(Mat self, Mat other):
        MatOps.copy(self, other)

    def get_grad_value(Mat self, copy=False):
        if copy:
            return np.array(self.get_grad_value(False), copy=True)

        cdef np.ndarray ndarray
        cdef np.npy_intp shape[2]

        pypinline typed_expression(pyp,
            if DEREF_MAT(self).number_of_elements() == 0:
                return np.zeros((0,0), dtype = self.dtype)
            shape[0] = <np.npy_intp> DEREF_MAT(self).dims(0)
            shape[1] = <np.npy_intp> DEREF_MAT(self).dims(1)
            ndarray = np.PyArray_SimpleNewFromData(
                2,
                shape,
                self.dtypeinternal,
                DEREF_MAT(self).dw().data()
            )
        ypy

        ndarray.base = <PyObject*> self
        Py_INCREF(self)

        return ndarray

    property name:
        def __get__(self):
            cdef string name
            pypinline typed_expression(pyp,
                if DEREF_MAT(self).name != NULL:
                    name = deref(DEREF_MAT(self).name)
                    return name.decode("utf-8")
            ypy
            return None

        def __set__(self, str newname):
            pypinline typed_expression(pyp,
                DEREF_MAT(self).set_name(newname.encode("utf-8"))
            ypy

    def __str__(Mat self):
        name_str = ', name=%s' % (self.name.__repr__(),) if self.name is not None else ''
        dtype_str = ', dtype=%s' % (self.dtype.__repr__(),) if self.dtype != np.float32 else ''

        extra = dtype_str + name_str
        n, d = self.shape
        return "dali.Mat(%d, %d%s)" % (n, d, extra)

    def __repr__(Mat self):
        cdef stringstream ss
        pypinline typed_expression(pyp,
            DEREF_MAT(self).print_me(ss)
        ypy
        return ss.to_string().decode("utf-8")

    def T(Mat self):
        return MatOps.transpose(self)

    def __add__(self, other):
        if type(self) is Mat:
            if type(other) is Mat:
                pypinline typed_expression_args(pyp,["<Mat>self", "<Mat>other"],
                    return WRAP_MAT(DEREF_MAT(self).operator_plus( DEREF_MAT(other) ))
                ypy
            elif type(other) is float or type(other) is int:
                pypinline typed_expression(pyp,
                    return WRAP_MAT(DEREF_MAT(self).operator_plus( (<TYPE_NAME>other) ))
                ypy
            else:
                raise TypeError("Mat can only be added to float, int, or Mat.")
        else:
            return other._radd(self)

    def _radd(self, other):
        if type(other) is Mat:
            pypinline typed_expression_args(pyp,["<Mat>self", "<Mat>other"],
                return WRAP_MAT(DEREF_MAT(self).operator_plus( DEREF_MAT(other) ))
            ypy
        elif type(other) is float or type(other) is int:
            pypinline typed_expression(pyp,
                return WRAP_MAT(DEREF_MAT(self).operator_plus( (<TYPE_NAME>other) ))
            ypy
        else:
            raise TypeError("Mat can only be added to float, int, or Mat.")

    def __sub__(self, other):
        if type(self) is Mat:
            if type(other) is Mat:
                pypinline typed_expression_args(pyp,["<Mat>self", "<Mat>other"],
                    return WRAP_MAT(DEREF_MAT(self).operator_minus( DEREF_MAT(other) ))
                ypy
            elif type(other) is float or type(other) is int:
                pypinline typed_expression(pyp,
                    return WRAP_MAT(DEREF_MAT(self).operator_minus( (<TYPE_NAME>other) ))
                ypy
            else:
                raise TypeError("Mat can only be added to float, int, or Mat.")
        else:
            return other._rsub(self)

    def _rsub(self, other):
        if type(other) is Mat:
            pypinline typed_expression_args(pyp,["<Mat>self", "<Mat>other"],
                return WRAP_MAT(DEREF_MAT(other).operator_minus( DEREF_MAT(self) ))
            ypy
        elif type(other) is float or type(other) is int:
            return MatOps.sub_broadcast_reversed(self, other)
        else:
            raise TypeError("Mat can only subtract from a float, int, or Mat.")

    def __pow__(Mat self, other, modulo):
        if type(other) is Mat:
            pypinline typed_expression_args(pyp,["self", "<Mat>other"],
                return WRAP_MAT(DEREF_MAT(self).operator_pow_mat( DEREF_MAT(other) ))
            ypy
        elif type(other) is float or type(other) is int:
            pypinline typed_expression(pyp,
                return WRAP_MAT(DEREF_MAT(self).operator_pow( (<TYPE_NAME>other) ))
            ypy
        else:
            raise TypeError("Mat can only be added to float, int, or Mat.")

    def __mul__(Mat self, other):
        if type(other) is Mat:
            pypinline typed_expression_args(pyp,["self", "<Mat>other"],
                return WRAP_MAT(DEREF_MAT(self).operator_times( DEREF_MAT(other) ))
            ypy
        elif type(other) is float or type(other) is int:
            pypinline typed_expression(pyp,
                return WRAP_MAT(DEREF_MAT(self).operator_times( (<TYPE_NAME>other) ))
            ypy
        else:
            raise TypeError("Mat can only be added to float, int, or Mat.")

    def __truediv__(Mat self, other):
        if type(other) is Mat:
            pypinline typed_expression_args(pyp,["self", "<Mat>other"],
                return WRAP_MAT(DEREF_MAT(self).operator_divide( DEREF_MAT(other) ))
            ypy
        elif type(other) is float or type(other) is int:
            pypinline typed_expression(pyp,
                return WRAP_MAT(DEREF_MAT(self).operator_divide( (<TYPE_NAME>other) ))
            ypy
        else:
            raise TypeError("Mat can only be added to float, int, or Mat.")

    def __getitem__(Mat self, index):
        if type(index) == Mat:
            return MatOps.rows_pluck(self, index)
        else:
            return MatOps.row_pluck(self, <int>index)

    def __setstate__(self, state):
        self.free_internal()
        self.dtypeinternal = np.NPY_NOTYPE
        self.steal_numpy_memory(state["w"], True)
        self.constant = state["cst"]
        if "n" in state:
            self.name = state["n"]

    def __getstate__(self):
        state = {
            "w" : self.w,
            "cst":self.constant
        }
        if self.name is not None:
            state["n"] = self.name
        return state

    def __reduce__(self):
        return (
            self.__class__,
            (
                0, 0
            ), self.__getstate__(),
        )

    def log(Mat self):
        return MatOps.log(self)

    def dot(Mat self, Mat other):
        pypinline typed_expression_args(pyp, ["self", "<Mat>other"],
            return WRAP_MAT(DEREF_MAT(self).dot(DEREF_MAT(other)))
        ypy

    def sum(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).sum())
        ypy

    def mean(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).mean())
        ypy
    def L2_norm(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).L2_norm())
        ypy

    def sigmoid(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).sigmoid())
        ypy

    def tanh(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).tanh())
        ypy

    def relu(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).relu())
        ypy

    def __abs__(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).absolute_value())
        ypy


    def square(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).square())
        ypy

    def exp(Mat self):
        pypinline typed_expression(pyp,
            return WRAP_MAT(DEREF_MAT(self).exp())
        ypy

    @staticmethod
    def eye(rows, diag = 1, dtype=None):
        cdef Mat output = Mat(0, 0, dtype=dtype)
        pypinline typed_expression_args(pyp, ["output"],
            output.free_internal()
            output.matinternal = matrix_initializations[TYPE_NAME].eye(diag, rows)
        ypy
        return output

    @staticmethod
    def empty(shape, dtype=None):
        cdef Mat output = Mat(0, 0, dtype=dtype)
        output.free_internal()

        cdef bint error = False
        pypinline typed_expression_args(pyp, ["output"],
            if (type(shape) == list or type(shape) == tuple) and len(shape) == 2:
                output.matinternal = matrix_initializations[TYPE_NAME].empty(shape[0], shape[1])
            elif type(shape) == int:
                output.matinternal = matrix_initializations[TYPE_NAME].empty(shape, 1)
            else:
                error = True
        ypy
        if error:
            raise TypeError("shape must be of type int, list, or tuple.")
        return output

    @staticmethod
    def ones(shape, dtype=None):
        cdef Mat output = Mat(0, 0, dtype=dtype)
        cdef bint error = False
        pypinline typed_expression_args(pyp, ["output"],
            if (type(shape) == list or type(shape) == tuple) and len(shape) == 2:
                output.matinternal = matrix_initializations[TYPE_NAME].ones(shape[0], shape[1])
            elif type(shape) == int:
                output.matinternal = matrix_initializations[TYPE_NAME].ones(shape, 1)
            else:
                error = True
        ypy
        if error:
            raise TypeError("shape must be of type int, list, or tuple.")
        return output

    @staticmethod
    def zeros(shape, dtype=None):
        cdef Mat output = Mat(0, 0, dtype=dtype)
        output.free_internal()

        cdef bint error = False
        pypinline typed_expression_args(pyp, ["output"],
            if (type(shape) == list or type(shape) == tuple) and len(shape) == 2:
                output.matinternal = matrix_initializations[TYPE_NAME].zeros(shape[0], shape[1])
            elif type(shape) == int:
                output.matinternal = matrix_initializations[TYPE_NAME].zeros(shape, 1)
            else:
                error = True
        ypy
        if error:
            raise TypeError("shape must be of type int, list, or tuple.")
        return output


pypinline type_repeat(pyp,
cdef inline vector[CMat[TYPE_NAME]] TYPED(mats_to_vec)(list mats):
    "Converts a list of mats to a vector[CMat[TYPE_NAME]]"
    cdef vector[CMat[TYPE_NAME]] mats_vec
    mats_vec.reserve(len(mats))
    for mat in mats:
        mats_vec.push_back(DEREF_MAT(mat))
    return mats_vec
ypy

pypinline type_repeat(pyp,
cdef inline Mat TYPED(WrapMat)(const CMat[TYPE_NAME]& internal):
    cdef Mat output = Mat(0,0)
    output.free_internal()
    output.matinternal = matrix_initializations[TYPE_NAME].as_pointer(internal)
    output.dtypeinternal = TYPE_NPYINTERNAL
    return output
ypy
